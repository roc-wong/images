交互过程如上图所示，详细的描述了在简历TCP请求后，SSL握手的过程，整个HTTPS的交互过程大致如下：

第一步：1-3 服务器端生成一个证书请求，服务器向权威的CA机构申请证书，一般是把公钥给CA进行加密生成带CA签名的证书。

第二步：4 如果CA是权威的机构，一般情况下浏览器会报错CA的根证书，如果是自签，则需要客户端主动加载或者选择信任服务器发来的证书。

第三步：5 建立底层socket服务，完成TCP的三次握手。

第四步：6 建立传输层的SSL握手，具体又可描述为:

   A :  6.0-6.1 客户端发起clent hello 请求：将自己支持的一套加密规则、以及一个随机数（Random_C）发送给服务器。

   B :  6.2-6.3 服务器响应server hello ：服务器根据自己支持的加密规则，从客户端发来的请求中选出一组加密算法与HASH算法，生成随机数（Random_S），并将自己的身份信息以证书（CA）的形式发回给浏览器。

   C:   6.4-6.5 客户端接到服务器的初步响应后做四件事情,然后把数据发送给服务器端：               

     （1）证书校验： 验证证书的合法性（颁发证书的机构是否合法，证书中包含的网站地址是否与正在访问的地址一致等）。

     （2）生成密码：浏览器会生成一串随机数的密码（Pre_master），并用CA证书里的公钥加密(enc_pre_master)，用于传给服务器。

     （3）计算协商密钥：
             此时客户端已经获取全部的计算协商密钥需要的信息：两个明文随机数 Random_C 和 Random_S 与自己计算产生的 Pre-master，计算得到协商密钥enc_key。enc_key=Fuc(random_C, random_S, Pre-Master)

     （4）生成握手信息：使用约定好的HASH计算握手消息，并使用协商密钥enc_key及约定好的算法对消息进行加密。

   D:   6.6-6.7 服务器端接收到客户端发来的SSL握手信息后，做以下3件事：
     （1）私钥解密：使用自己的私钥从接收到的enc_pre_master中解密取出密码Pre_master。

     （2）计算协商密钥：此时服务器已经获取全部的计算协商密钥需要的信息：两个明文随机数 Random_C 和 Random_S 与Pre-master，计算得到协商密钥enc_key。enc_key=Fuc(random_C, random_S, Pre-Master)

      （3）解密握手消息：使用协商密钥enc_key解密客户端发来的握手消息，并验证HASH是否与客户端发来的一致。
      （4）生成握手消息使用协商密钥enc_key及约定好的算法加密一段握手消息，发送给客户端。

第五步： 7 正常加密通信
       握手成功之后，所有的通信数据在应用层下都将由之前协商密钥enc_key及约定好的算法进行加密解密。